// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	users "sampleprj/features/users"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Login provides a mock function with given fields: hp, password
func (_m *Service) Login(hp string, password string) (users.User, error) {
	ret := _m.Called(hp, password)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (users.User, error)); ok {
		return rf(hp, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) users.User); ok {
		r0 = rf(hp, password)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(hp, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *Service) Register(newUser users.User) (users.User, error) {
	ret := _m.Called(newUser)

	var r0 users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(users.User) (users.User, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(users.User) users.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	if rf, ok := ret.Get(1).(func(users.User) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
